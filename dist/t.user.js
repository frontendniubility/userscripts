// ==UserScript==
// @name gm_config_toolbar
// @version 0.0.4
// @author kufii
// @description greasyfork configuration toolbar on the script addins
// @homepage https://github.com/niubilityfrontend/userscripts#readme
// @supportURL https://github.com/kufii/My-UserScripts
// @match *://*/*
// @namespace https://github.com/niubilityfrontend
// @license OSL-3.0
// @grant GM_xmlhttpRequest
// @grant GM_getValue
// @grant GM_setValue
// @grant GM_listValues
// @grant GM_deleteValue
// @grant GM_registerMenuCommand
// ==/UserScript==

/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/hunttingteacheron51talk/t.js":
/*!******************************************!*\
  !*** ./src/hunttingteacheron51talk/t.js ***!
  \******************************************/
/***/ (() => {

eval("\r\n\r\nvar _this = void 0;\r\n\r\nfunction _newArrowCheck(innerThis, boundThis) { if (innerThis !== boundThis) { throw new TypeError(\"Cannot instantiate an arrow function\"); } }\r\n\r\n// ==UserScript==\r\n// @name         gm_config_toolbar\r\n// @version      0.0.4\r\n// @namespace    https://github.com/niubilityfrontend\r\n// @description  greasyfork configuration toolbar on the script addins\r\n// @author       kufii\r\n// @license      OSL-3.0\r\n// @supportURL   https://github.com/kufii/My-UserScripts\r\n// @grant        GM_xmlhttpRequest\r\n// @grant        GM_getValue\r\n// @grant        GM_setValue\r\n// @grant        GM_listValues\r\n// @grant        GM_deleteValue\r\n// @grant        GM_registerMenuCommand\r\n// ==/UserScript==\r\n(function () {\r\n  'use strict';\r\n\r\n  _newArrowCheck(this, _this);\r\n\r\n  window.GM_config = function (settings) {\r\n    let storage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'cfg';\r\n    let ret = null;\r\n    const prefix = 'gm-config';\r\n\r\n    const addStyle = function addStyle() {\r\n      const css = \"\\n\\t\\t\\t\\t.\".concat(prefix, \" {\\n\\t\\t\\t\\t\\tdisplay: grid;\\n\\t\\t\\t\\t\\talign-items: center;\\n\\t\\t\\t\\t\\tgrid-row-gap: 5px;\\n\\t\\t\\t\\t\\tgrid-column-gap: 10px;\\n\\t\\t\\t\\t\\tbackground-color: white;\\n\\t\\t\\t\\t\\tborder: 1px solid black;\\n\\t\\t\\t\\t\\tpadding: 5px;\\n\\t\\t\\t\\t\\tposition: fixed;\\n\\t\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\t\\tright: 0;\\n\\t\\t\\t\\t\\tz-index: 2147483647;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.\").concat(prefix, \" label {\\n\\t\\t\\t\\t\\tgrid-column: 1 / 2;\\n\\t\\t\\t\\t\\tcolor: black;\\n\\t\\t\\t\\t\\ttext-align: right;\\n\\t\\t\\t\\t\\tfont-size: small;\\n\\t\\t\\t\\t\\tfont-weight: bold;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.\").concat(prefix, \" input,\\n\\t\\t\\t\\t.\").concat(prefix, \" textarea,\\n\\t\\t\\t\\t.\").concat(prefix, \" select {\\n\\t\\t\\t\\t\\tgrid-column: 2 / 4;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.\").concat(prefix, \" .\").concat(prefix, \"-save {\\n\\t\\t\\t\\t\\tgrid-column: 2 / 3;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.\").concat(prefix, \" .\").concat(prefix, \"-cancel {\\n\\t\\t\\t\\t\\tgrid-column: 3 / 4;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\");\r\n\r\n      if (typeof GM_addStyle === 'undefined') {\r\n        const style = document.createElement('style');\r\n        style.textContent = css;\r\n        document.head.appendChild(style);\r\n      } else {\r\n        GM_addStyle(css);\r\n      }\r\n    };\r\n\r\n    const load = function load() {\r\n      var _this2 = this;\r\n\r\n      const defaults = {};\r\n      settings.forEach(function (_ref) {\r\n        let {\r\n          key,\r\n          \"default\": def\r\n        } = _ref;\r\n\r\n        _newArrowCheck(this, _this2);\r\n\r\n        return defaults[key] = def;\r\n      }.bind(this));\r\n      let cfg = typeof GM_getValue !== 'undefined' ? GM_getValue(storage) : localStorage.getItem(storage);\r\n      if (!cfg) return defaults;\r\n      cfg = JSON.parse(cfg);\r\n      Object.entries(defaults).forEach(function (_ref2) {\r\n        let [key, value] = _ref2;\r\n\r\n        _newArrowCheck(this, _this2);\r\n\r\n        if (typeof cfg[key] === 'undefined') {\r\n          cfg[key] = value;\r\n        }\r\n      }.bind(this));\r\n      return cfg;\r\n    };\r\n\r\n    const save = function save(cfg) {\r\n      const data = JSON.stringify(cfg);\r\n      typeof GM_setValue !== 'undefined' ? GM_setValue(storage, data) : localStorage.setItem(storage, data);\r\n    };\r\n\r\n    const setup = function setup() {\r\n      const createContainer = function createContainer() {\r\n        const form = document.createElement('form');\r\n        form.classList.add(prefix);\r\n        return form;\r\n      };\r\n\r\n      const createTextbox = function createTextbox(name, value, placeholder, maxLength, multiline, resize) {\r\n        const input = document.createElement(multiline ? 'textarea' : 'input');\r\n\r\n        if (multiline) {\r\n          input.style.resize = resize ? 'vertical' : 'none';\r\n        } else {\r\n          input.type = 'text';\r\n        }\r\n\r\n        input.name = name;\r\n        if (typeof value !== 'undefined') input.value = value;\r\n        if (placeholder) input.placeholder = placeholder;\r\n        if (maxLength) input.maxLength = maxLength;\r\n        return input;\r\n      };\r\n\r\n      const createNumber = function createNumber(name, value, placeholder, min, max, step) {\r\n        const input = createTextbox(name, value, placeholder);\r\n        input.type = 'number';\r\n        if (typeof min !== 'undefined') input.min = min;\r\n        if (typeof max !== 'undefined') input.max = max;\r\n        if (typeof step !== 'undefined') input.step = step;\r\n        return input;\r\n      };\r\n\r\n      const createSelect = function createSelect(name, options, value, showBlank) {\r\n        var _this3 = this;\r\n\r\n        const select = document.createElement('select');\r\n        select.name = name;\r\n\r\n        const createOption = function createOption(val) {\r\n          const {\r\n            value = val,\r\n            text = val\r\n          } = val;\r\n          const option = document.createElement('option');\r\n          option.value = value;\r\n          option.textContent = text;\r\n          return option;\r\n        };\r\n\r\n        if (showBlank) {\r\n          select.appendChild(createOption(''));\r\n        }\r\n\r\n        options.forEach(function (opt) {\r\n          var _this4 = this;\r\n\r\n          _newArrowCheck(this, _this3);\r\n\r\n          if (typeof opt.optgroup !== 'undefined') {\r\n            const optgroup = document.createElement('optgroup');\r\n            optgroup.label = opt.optgroup;\r\n            select.appendChild(optgroup);\r\n            opt.values.forEach(function (value) {\r\n              _newArrowCheck(this, _this4);\r\n\r\n              return optgroup.appendChild(createOption(value));\r\n            }.bind(this));\r\n          } else {\r\n            select.appendChild(createOption(opt));\r\n          }\r\n        }.bind(this));\r\n        select.value = value;\r\n        return select;\r\n      };\r\n\r\n      const createCheckbox = function createCheckbox(name, checked) {\r\n        const checkbox = document.createElement('input');\r\n        checkbox.id = \"\".concat(prefix, \"-\").concat(name);\r\n        checkbox.type = 'checkbox';\r\n        checkbox.name = name;\r\n        checkbox.checked = checked;\r\n        return checkbox;\r\n      };\r\n\r\n      const createButton = function createButton(text, onclick, classname) {\r\n        const button = document.createElement('button');\r\n        button.classList.add(\"\".concat(prefix, \"-\").concat(classname));\r\n        button.textContent = text;\r\n        button.onclick = onclick;\r\n        return button;\r\n      };\r\n\r\n      const createLabel = function createLabel(label, htmlFor) {\r\n        const lbl = document.createElement('label');\r\n        if (htmlFor) lbl.htmlFor = htmlFor;\r\n        lbl.textContent = label;\r\n        return lbl;\r\n      };\r\n\r\n      const init = function init(cfg) {\r\n        var _this5 = this;\r\n\r\n        const controls = {};\r\n        const div = createContainer();\r\n        settings.filter(function (_ref3) {\r\n          let {\r\n            type\r\n          } = _ref3;\r\n\r\n          _newArrowCheck(this, _this5);\r\n\r\n          return type !== 'hidden';\r\n        }.bind(this)).forEach(function (setting) {\r\n          var _this6 = this;\r\n\r\n          _newArrowCheck(this, _this5);\r\n\r\n          const value = cfg[setting.key];\r\n          let control;\r\n\r\n          if (setting.type === 'text') {\r\n            control = createTextbox(setting.key, value, setting.placeholder, setting.maxLength, setting.multiline, setting.resizable);\r\n          } else if (setting.type === 'number') {\r\n            control = createNumber(setting.key, value, setting.placeholder, setting.min, setting.max, setting.step);\r\n          } else if (setting.type === 'dropdown') {\r\n            control = createSelect(setting.key, setting.values, value, setting.showBlank);\r\n          } else if (setting.type === 'bool') {\r\n            control = createCheckbox(setting.key, value);\r\n          }\r\n\r\n          div.appendChild(createLabel(setting.label, control.id));\r\n          div.appendChild(control);\r\n          controls[setting.key] = control;\r\n          control.addEventListener(setting.type === 'dropdown' ? 'change' : 'input', function () {\r\n            _newArrowCheck(this, _this6);\r\n\r\n            if (ret.onchange) {\r\n              const control = controls[setting.key];\r\n              const value = setting.type === 'bool' ? control.checked : control.value;\r\n              ret.onchange(setting.key, value);\r\n            }\r\n          }.bind(this));\r\n        }.bind(this));\r\n        div.appendChild(createButton('Save', function () {\r\n          var _this7 = this;\r\n\r\n          _newArrowCheck(this, _this5);\r\n\r\n          settings.filter(function (_ref4) {\r\n            let {\r\n              type\r\n            } = _ref4;\r\n\r\n            _newArrowCheck(this, _this7);\r\n\r\n            return type !== 'hidden';\r\n          }.bind(this)).forEach(function (_ref5) {\r\n            let {\r\n              key,\r\n              type\r\n            } = _ref5;\r\n\r\n            _newArrowCheck(this, _this7);\r\n\r\n            const control = controls[key];\r\n            cfg[key] = type === 'bool' ? control.checked : control.value;\r\n          }.bind(this));\r\n          save(cfg);\r\n\r\n          if (ret.onsave) {\r\n            ret.onsave(cfg);\r\n          }\r\n\r\n          div.remove();\r\n        }.bind(this), 'save'));\r\n        div.appendChild(createButton('Cancel', function () {\r\n          _newArrowCheck(this, _this5);\r\n\r\n          if (ret.oncancel) {\r\n            ret.oncancel(cfg);\r\n          }\r\n\r\n          div.remove();\r\n        }.bind(this), 'cancel'));\r\n        document.body.appendChild(div);\r\n      };\r\n\r\n      init(load());\r\n    };\r\n\r\n    addStyle();\r\n    ret = {\r\n      load,\r\n      save,\r\n      setup\r\n    };\r\n    return ret;\r\n  };\r\n}).bind(void 0)();\n\n//# sourceURL=webpack://userscripts/./src/hunttingteacheron51talk/t.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/hunttingteacheron51talk/t.js"]();
/******/ 	
/******/ })()
;