// ==UserScript==
// @name SuperGM
// @version 0.0.1
// @description Extends the GM_setValue and GM_getValue functions for any javascript variable type. basis on https://userscripts-mirror.org/scripts/source/107941.user.js
// @homepage https://github.com/niubilityfrontend/userscripts#readme
// @supportURL https://github.com/niubilityfrontend/userscripts/issues
// @match *://*/*
// @namespace userscripts.org/users/158640
// ==/UserScript==

/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/hunttingteacheron51talk/supperGM.user.js":
/*!******************************************************!*\
  !*** ./src/hunttingteacheron51talk/supperGM.user.js ***!
  \******************************************************/
/***/ (() => {

eval("// ==UserScript==\r\n// @name            SuperGM\r\n// @version         0.0.1\r\n// @description     Extends the GM_setValue and GM_getValue functions for any javascript variable type. basis on https://userscripts-mirror.org/scripts/source/107941.user.js\r\n// @namespace       userscripts.org/users/158640\r\n// ==/UserScript==\r\n(function() {\r\n  String.prototype.startsWith = function(str) {\r\n    return this.slice(0, str.length) == str;\r\n  };\r\n  String.prototype.endsWith = function(str) {\r\n    return this.slice(-str.length) == str;\r\n  };\r\n  String.prototype.contains = function(str) {\r\n    return this.indexOf(str) > -1;\r\n  };\r\n  var SuperGM = function(version, _expiredMilliseconds) {\r\n    var versionkeybasic = 'tsharp.org:key:v:';\r\n    var expiredkeybasic = 'tsharp.org:key:e:';\r\n    var JSON_MarkerStr = 'json_val: ';\r\n    var FunctionMarker = 'function_code: ';\r\n    var expiredMilliseconds = -1;\r\n    if (typeof version != 'undefine') { version = -1; }\r\n    if (typeof _expiredMilliseconds != 'undefine') {\r\n      expiredMilliseconds = -1;\r\n    } else {\r\n      expiredMilliseconds = _expiredMilliseconds;\r\n    }\r\n\r\n    function ReportError(msg) {\r\n      if (console && console.error) {\r\n        console.log(msg);\r\n      } else {\r\n        throw new Error(msg);\r\n      }\r\n    }\r\n    //--- Check that the environment is proper.\r\n    if (typeof GM_setValue != \"function\") {\r\n      ReportError('This library requires Greasemonkey! GM_setValue is missing.');\r\n    }\r\n    if (typeof GM_getValue != \"function\") {\r\n      ReportError('This library requires Greasemonkey! GM_getValue is missing.');\r\n    }\r\n    if (typeof version != 'integer') {\r\n      ReportError('Arg version should be a integer type if you wana set it.');\r\n    }\r\n    if (typeof expiredMilliseconds != 'integer') {\r\n      ReportError('Arg expiredMilliseconds should be a integer type if you wana set it.');\r\n    }\r\n    this.set = function(varName, varValue) {\r\n      if (!varName) {\r\n        ReportError('Illegal varName sent to GM_SuperValue.set().');\r\n        return;\r\n      }\r\n      if (/[^\\w _-]/.test(varName)) {\r\n        ReportError('Suspect, probably illegal, varName sent to GM_SuperValue.set().');\r\n      }\r\n      var versionKey = versionkeybasic + varName;\r\n      GM_setValue(versionKey, version);\r\n      var expiredkey = expiredkeybasic + varName;\r\n      GM_setValue(expiredkey, new Date().getTime());\r\n      if (typeof varValue == 'function') {\r\n        varValue = varValue();\r\n      }\r\n      switch (typeof varValue) {\r\n        case 'undefined':\r\n          ReportError('Illegal varValue sent to GM_SuperValue.set().');\r\n          break;\r\n        case 'boolean':\r\n        case 'string':\r\n          //--- These 2 types are safe to store, as is.\r\n          GM_setValue(varName, varValue);\r\n          break;\r\n        case 'number':\r\n          /*--- Numbers are ONLY safe if they are integers.\r\n              Note that hex numbers, EG 0xA9, get converted\r\n              and stored as decimals, EG 169, automatically.\r\n              That's a feature of JavaScript.\r\n\r\n              Also, only a 32-bit, signed integer is allowed.\r\n              So we only process +/-2147483647 here.\r\n          */\r\n          if (varValue === parseInt(varValue) && Math.abs(varValue) < 2147483647) {\r\n            GM_setValue(varName, varValue);\r\n            break;\r\n          }\r\n          case 'object':\r\n            /*--- For all other cases (but functions), and for\r\n                unsafe numbers, store the value as a JSON string.\r\n            */\r\n            var safeStr = JSON_MarkerStr + JSON.stringify(varValue);\r\n            GM_setValue(varName, safeStr);\r\n            break;\r\n          case 'function':\r\n            /*--- Functions need special handling.\r\n             */\r\n            var safeStr = FunctionMarker + varValue.toString();\r\n            GM_setValue(varName, safeStr);\r\n            break;\r\n          default:\r\n            ReportError('Unknown type in GM_SuperValue.set()!');\r\n            break;\r\n      }\r\n    }; //-- End of set()\r\n    this.getOrAdd = function(varName, defaultValue) {\r\n      if (!varName) {\r\n        ReportError('Illegal varName sent to GM_SuperValue.get().');\r\n        return;\r\n      }\r\n      if (/[^\\w _-]/.test(varName)) {\r\n        ReportError('Suspect, probably illegal, varName sent to GM_SuperValue.get().');\r\n      }\r\n      var versionKey = versionkeybasic + varName;\r\n      var savedversion = GM_getValue(versionKey);\r\n      if (version != savedversion) { //需判断设置默认-1时\r\n        if (typeof GM_deleteValue != \"function\") {\r\n          GM_deleteValue(varName);\r\n          GM_deleteValue(versionKey);\r\n        }\r\n        if (typeof defaultValue == 'function') {\r\n          var varvalue = defaultValue();\r\n          set(varName, varvalue);\r\n          return varvalue;\r\n        } else {\r\n          set(varName, varvalue);\r\n          return defaultValue;\r\n        }\r\n      }\r\n      var expiredkey = expiredkeybasic + varName;\r\n      var expire = GM_getValue(expiredkey);\r\n      if (new Date().getTime() - expire > expiredMilliseconds) {\r\n        if (typeof GM_deleteValue != \"function\") {\r\n          GM_deleteValue(varName);\r\n          GM_deleteValue(expiredkey);\r\n        }\r\n      }\r\n      //--- Attempt to get the value from storage.\r\n      var varValue = GM_getValue(varName);\r\n      if (!varValue) return defaultValue;\r\n      //--- We got a value from storage. Now unencode it, if necessary.\r\n      if (typeof varValue == \"string\") {\r\n        //--- Is it a JSON value?\r\n        var regxp = new RegExp('^' + JSON_MarkerStr + '(.+)$');\r\n        var m = varValue.match(regxp);\r\n        if (m && m.length > 1) {\r\n          varValue = JSON.parse(m[1]);\r\n          return varValue;\r\n        }\r\n        //--- Is it a function?\r\n        var regxp = new RegExp('^' + FunctionMarker + '((?:.|\\n|\\r)+)$');\r\n        var m = varValue.match(regxp);\r\n        if (m && m.length > 1) {\r\n          varValue = eval('(' + m[1] + ')');\r\n          return varValue;\r\n        }\r\n      }\r\n      return varValue;\r\n    }; //-- End of get()\r\n    this.del = function(varname) {\r\n      if (typeof GM_deleteValue != \"function\") ReportError('Using del function requires Greasemonkey and grant rights for it! GM_deleteValue is missing.');\r\n      GM_deleteValue(varName);\r\n    };\r\n    this.delStartsWith = function(varname) {\r\n      if (typeof GM_deleteValue != \"function\") ReportError('Using delStartsWith function requires Greasemonkey and grant rights for it! GM_deleteValue is missing.');\r\n      if (typeof GM_listValues != \"function\") ReportError('Using delStartsWith function requires Greasemonkey and grant rights for it! GM_listValues is missing.');\r\n      for (var item in GM_listValues()) {\r\n        if (item.startsWith(varname)) {\r\n          GM_deleteValue(item);\r\n        }\r\n      }\r\n    };\r\n  }\r\n})();\r\n\n\n//# sourceURL=webpack://userscripts/./src/hunttingteacheron51talk/supperGM.user.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/hunttingteacheron51talk/supperGM.user.js"]();
/******/ 	
/******/ })()
;