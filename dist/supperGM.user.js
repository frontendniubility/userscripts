// ==UserScript==
// @name        SuperGM
// @version     2021.5.12103902
// @description Extends the GM_setValue and GM_getValue functions for any javascript variable type. basis on https://userscripts-mirror.org/scripts/source/107941.user.js
// @homepage    https://github.com/niubilityfrontend/userscripts#readme
// @supportURL  https://github.com/niubilityfrontend/userscripts/issues
// @match       *://*/*
// @namespace   userscripts.org/users/158640
// ==/UserScript==

/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/hunttingteacheron51talk/supperGM.user.js":
/*!******************************************************!*\
  !*** ./src/hunttingteacheron51talk/supperGM.user.js ***!
  \******************************************************/
/***/ (() => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// ==UserScript==\n// @name            SuperGM\n// @version         0.0.1\n// @description     Extends the GM_setValue and GM_getValue functions for any javascript variable type. basis on https://userscripts-mirror.org/scripts/source/107941.user.js\n// @namespace       userscripts.org/users/158640\n// ==/UserScript==\n(function () {\n  String.prototype.startsWith = function (str) {\n    return this.slice(0, str.length) == str;\n  };\n\n  String.prototype.endsWith = function (str) {\n    return this.slice(-str.length) == str;\n  };\n\n  String.prototype.contains = function (str) {\n    return this.indexOf(str) > -1;\n  };\n\n  var SuperGM = function SuperGM(version, _expiredMilliseconds) {\n    var versionkeybasic = 'tsharp.org:key:v:',\n        expiredkeybasic = 'tsharp.org:key:e:',\n        JSON_MarkerStr = 'json_val: ',\n        FunctionMarker = 'function_code: ',\n        expiredMilliseconds = -1;\n\n    if (typeof version != 'undefine') {\n      version = -1;\n    }\n\n    if (typeof _expiredMilliseconds != 'undefine') {\n      expiredMilliseconds = -1;\n    } else {\n      expiredMilliseconds = _expiredMilliseconds;\n    }\n\n    function ReportError(msg) {\n      if (console && console.error) {\n        console.log(msg);\n      } else {\n        throw new Error(msg);\n      }\n    } //--- Check that the environment is proper.\n\n\n    if (typeof GM_setValue != \"function\") {\n      ReportError('This library requires Greasemonkey! GM_setValue is missing.');\n    }\n\n    if (typeof GM_getValue != \"function\") {\n      ReportError('This library requires Greasemonkey! GM_getValue is missing.');\n    }\n\n    if (typeof version != 'integer') {\n      ReportError('Arg version should be a integer type if you wana set it.');\n    }\n\n    if (typeof expiredMilliseconds != 'integer') {\n      ReportError('Arg expiredMilliseconds should be a integer type if you wana set it.');\n    }\n\n    this.set = function (varName, varValue) {\n      if (!varName) {\n        ReportError('Illegal varName sent to GM_SuperValue.set().');\n        return;\n      }\n\n      if (/[^\\w _-]/.test(varName)) {\n        ReportError('Suspect, probably illegal, varName sent to GM_SuperValue.set().');\n      }\n\n      var versionKey = versionkeybasic + varName;\n      GM_setValue(versionKey, version);\n      var expiredkey = expiredkeybasic + varName;\n      GM_setValue(expiredkey, new Date().getTime());\n\n      if (typeof varValue == 'function') {\n        varValue = varValue();\n      }\n\n      switch (_typeof(varValue)) {\n        case 'undefined':\n          ReportError('Illegal varValue sent to GM_SuperValue.set().');\n          break;\n\n        case 'boolean':\n        case 'string':\n          //--- These 2 types are safe to store, as is.\n          GM_setValue(varName, varValue);\n          break;\n\n        case 'number':\n          /*--- Numbers are ONLY safe if they are integers.\r\n              Note that hex numbers, EG 0xA9, get converted\r\n              and stored as decimals, EG 169, automatically.\r\n              That's a feature of JavaScript.\r\n                Also, only a 32-bit, signed integer is allowed.\r\n              So we only process +/-2147483647 here.\r\n          */\n          if (varValue === parseInt(varValue) && Math.abs(varValue) < 2147483647) {\n            GM_setValue(varName, varValue);\n            break;\n          }\n\n        case 'object':\n          /*--- For all other cases (but functions), and for\r\n              unsafe numbers, store the value as a JSON string.\r\n          */\n          var safeStr = JSON_MarkerStr + JSON.stringify(varValue);\n          GM_setValue(varName, safeStr);\n          break;\n\n        case 'function':\n          /*--- Functions need special handling.\r\n           */\n          var safeStr = FunctionMarker + varValue.toString();\n          GM_setValue(varName, safeStr);\n          break;\n\n        default:\n          ReportError('Unknown type in GM_SuperValue.set()!');\n          break;\n      }\n    }; //-- End of set()\n\n\n    this.getOrAdd = function (varName, defaultValue) {\n      if (!varName) {\n        ReportError('Illegal varName sent to GM_SuperValue.get().');\n        return;\n      }\n\n      if (/[^\\w _-]/.test(varName)) {\n        ReportError('Suspect, probably illegal, varName sent to GM_SuperValue.get().');\n      }\n\n      var versionKey = versionkeybasic + varName,\n          savedversion = GM_getValue(versionKey);\n\n      if (version != savedversion) {\n        //需判断设置默认-1时\n        if (typeof GM_deleteValue != \"function\") {\n          GM_deleteValue(varName);\n          GM_deleteValue(versionKey);\n        }\n\n        if (typeof defaultValue == 'function') {\n          var varvalue = defaultValue();\n          set(varName, varvalue);\n          return varvalue;\n        } else {\n          set(varName, varvalue);\n          return defaultValue;\n        }\n      }\n\n      var expiredkey = expiredkeybasic + varName,\n          expire = GM_getValue(expiredkey);\n\n      if (new Date().getTime() - expire > expiredMilliseconds) {\n        if (typeof GM_deleteValue != \"function\") {\n          GM_deleteValue(varName);\n          GM_deleteValue(expiredkey);\n        }\n      } //--- Attempt to get the value from storage.\n\n\n      var varValue = GM_getValue(varName);\n      if (!varValue) return defaultValue; //--- We got a value from storage. Now unencode it, if necessary.\n\n      if (typeof varValue == \"string\") {\n        //--- Is it a JSON value?\n        var regxp = new RegExp('^' + JSON_MarkerStr + '(.+)$'),\n            m = varValue.match(regxp);\n\n        if (m && m.length > 1) {\n          varValue = JSON.parse(m[1]);\n          return varValue;\n        } //--- Is it a function?\n\n\n        var regxp = new RegExp('^' + FunctionMarker + '((?:.|\\n|\\r)+)$'),\n            m = varValue.match(regxp);\n\n        if (m && m.length > 1) {\n          varValue = eval('(' + m[1] + ')');\n          return varValue;\n        }\n      }\n\n      return varValue;\n    }; //-- End of get()\n\n\n    this.del = function (varname) {\n      if (typeof GM_deleteValue != \"function\") ReportError('Using del function requires Greasemonkey and grant rights for it! GM_deleteValue is missing.');\n      GM_deleteValue(varName);\n    };\n\n    this.delStartsWith = function (varname) {\n      if (typeof GM_deleteValue != \"function\") ReportError('Using delStartsWith function requires Greasemonkey and grant rights for it! GM_deleteValue is missing.');\n      if (typeof GM_listValues != \"function\") ReportError('Using delStartsWith function requires Greasemonkey and grant rights for it! GM_listValues is missing.');\n\n      for (var item in GM_listValues()) {\n        if (item.startsWith(varname)) {\n          GM_deleteValue(item);\n        }\n      }\n    };\n  };\n})();\n\n//# sourceURL=webpack://userscripts/./src/hunttingteacheron51talk/supperGM.user.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/hunttingteacheron51talk/supperGM.user.js"]();
/******/ 	
/******/ })()
;